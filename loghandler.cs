using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace EveryTime
{
    class LogHandler
    {

        private XDocument logFile;
        private readonly EveryTime plugin;

        private static LogHandler instance;

        public static LogHandler getInstance(EveryTime plugin)
        {
            if(instance == null)
            {
                instance = new LogHandler(plugin);

            }
            return instance;
        }

        public LogHandler(EveryTime plugin)
        {
            this.plugin = plugin;

            loadLogfile();
            
        }

        private void loadLogfile()
        {
            if(!Directory.Exists(FileManager.GetAppFolder(plugin.GetConfigBool("et_log_location_global"), true, false, false) + "EveryTime/"))
            {
                Directory.CreateDirectory(FileManager.GetAppFolder(plugin.GetConfigBool("et_log_location_global"), true, false, false) + "EveryTime/");
            }
            if(!File.Exists(FileManager.GetAppFolder(plugin.GetConfigBool("et_log_location_global"), true, false, false) + "EveryTime/" + plugin.GetConfigString("et_log_filename")))
            {
                logFile = new XDocument(
                    new XDeclaration("1.0", "utf-8", "yes"),
                    new XComment("this document contains all the Time data of the admins on the server. PLEASE DO NOT EDIT THIS FILE!!!!"),
                    new XElement("Users"));
                logFile.Save(FileManager.GetAppFolder(plugin.GetConfigBool("et_log_location_global"), true, false, false) + "EveryTime/" + plugin.GetConfigString("et_log_filename")); 
            }
            else
            {
                logFile = XDocument.Load(FileManager.GetAppFolder(plugin.GetConfigBool("et_log_location_global"), true, false, false) + "EveryTime/" + plugin.GetConfigString("et_log_filename"));
            }
        }

        public void removeUser(string steamId)
        {
            logFile.Element("Users").Elements("User").Where(x => x.Attribute("steamId").Value == steamId).FirstOrDefault().Remove();
        }

        private void saveExistingUser(DateTime logoutTime, PlayerData player)
        {
            int playTime = Convert.ToInt32(Math.Round((logoutTime - player.loginTime).TotalMinutes));
            XElement user = logFile.Element("Users").Elements("User").Where(x => x.Attribute("steamId").Value == player.player.SteamId).FirstOrDefault();
            int totalTime = int.Parse(user.Element("TotalTime").Value);
            int timeThisWeek = int.Parse(user.Element("TotalTimeWeek").Value);
            DateTime lastLogin = DateTime.Parse(user.Element("LastLogin").Value);
            


            totalTime = totalTime + playTime;
             
            if(checkweek(player.loginTime,logoutTime))
            { timeThisWeek = timeThisWeek + playTime; }
            else
            { timeThisWeek = playTime; }

            user.SetElementValue("Username", player.player.Name);
            user.SetElementValue("Rank", player.player.GetRankName());
            user.SetElementValue("TotalTime", totalTime);
            user.SetElementValue("TotalTimeWeek", timeThisWeek);
            user.SetAttributeValue("LastLogin", lastLogin);

        }
        private void saveNewUser(DateTime logoutTime, PlayerData player)
        {
            int playTime = Convert.ToInt32(Math.Round((logoutTime - player.loginTime).TotalMinutes));

            logFile.Element("Users").Add(
                new XElement("User", new XAttribute("steamId", player.player.SteamId),
                new XElement("Username", player.player.Name),
                new XElement("Rank", player.player.GetRankName()),
                new XElement("TotalTime", playTime),
                new XElement("TotalTimeWeek", playTime),
                new XElement("LastLogin", player.loginTime)));
        }

        public void save(DateTime logoutTime, PlayerData player)
        {
            if(userHasData(player.player.SteamId))
            {
                saveExistingUser(logoutTime, player);
            }else
            {
                saveNewUser(logoutTime, player);
            }
        }

        private bool checkweek(DateTime lastLogin, DateTime currentlogin)
        {
            CultureInfo myCI = new CultureInfo("en-US");
            Calendar cal = myCI.Calendar;

            int weekLast = cal.GetWeekOfYear(lastLogin, CalendarWeekRule.FirstFullWeek, DayOfWeek.Monday);
            int weekNow = cal.GetWeekOfYear(currentlogin, CalendarWeekRule.FirstFullWeek, DayOfWeek.Monday);

            return weekLast == weekNow;

        }
        
        public bool userHasData(string steamId)
        {
            return logFile.Element("Users").Elements("User").Attributes("steamId").Any(att => att.Value == steamId);
        }
    }
}
